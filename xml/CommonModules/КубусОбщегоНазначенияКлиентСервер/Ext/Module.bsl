////////////////////////////////////////////////////////////////////////////////
// Подсистема Кубус
// https://github.com/ibrusniak/Qubus
//
// Модуль 'КубусОбщегоНазначенияКлиентСервер'
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Проверка параметров процедур и функций

// Проверяет соответсвие типа значения заданному типу.
// 
// Проверяет соответствие типа значения в параметре "ЗначениеПараметра" типу,
// переданному в параметре "ТипПараметра". В случае несоответствия генерирует
// исключение.
// 
// Параметры:
//
//		ИмяФункции - Строка - имя функции, параметр которой проверяется
//
//		ИмяПараметра - Строка - имя тестируемого параметра
//
//		ТипПараметра - Тип - объект типа "Тип", которому должен соответствовать
//		тип параметра "ЗначениеПараметра"
//
//		ЗначениеПараметра - произвольный - значение, тип которого проверяется.
//
Процедура ПроверитьПараметрФункции(ИмяФункции, ИмяПараметра, ТипПараметра, ЗначениеПараметра) Экспорт

	// Проверим сперва входный параметры непосредственно этой процедуры.
	
	Если ТипЗнч(ИмяФункции) <> Тип("Строка") Тогда
		
		ВызватьИсключение
			КубусОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
				КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.НеверныйТипПараметраФункции,
				"ПроверитьПараметрФункции",
				"ИмяФункции",
				Тип("Строка"));
			
	КонецЕсли;
	
	Если ТипЗнч(ИмяПараметра) <> Тип("Строка") Тогда
		
		ВызватьИсключение
			КубусОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
				КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.НеверныйТипПараметраФункции,
				"ПроверитьПараметрФункции",
				"ИмяПараметра",
				Тип("Строка"));
			
	КонецЕсли;

	Если ТипЗнч(ТипПараметра) <> Тип("Тип") Тогда
		
		ВызватьИсключение
			КубусОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
				КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.НеверныйТипПараметраФункции,
				"ПроверитьПараметрФункции",
				"ТипПараметра",
				Тип("Тип"));
			
	КонецЕсли;

	// Основная работа процедуры
	
	Если ТипЗнч(ЗначениеПараметра) <> ТипПараметра Тогда
		
		ВызватьИсключение
			КубусОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
				КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.НеверныйТипПараметраФункции,
				ИмяФункции,
				ИмяПараметра,
				ТипПараметра);
			
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Работа с JSON

Функция СериализацияВJson(Объект) Экспорт

	ЗаписьJson = Новый ЗаписьJSON();
	ЗаписьJson.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	Попытка
		ЗаписатьJSON(ЗаписьJson, Объект);
	Исключение
		
		ЗаписьJson.Закрыть();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение
			КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.СериализацииВJson +
			": " + ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	Возврат ЗаписьJson.Закрыть();
	
КонецФункции

Функция ДесериализоватьJsonВСоответствие(Json) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Json);
	
	Попытка
		Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		
		ЧтениеJSON.Закрыть();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение
			КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.ДесериализацииИзJson +
			": " + ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке);
		
	КонецПопытки;

	ЧтениеJSON.Закрыть();
	Возврат Соответствие;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с массивами

Процедура ДополнитьМассив(Приемник, Источник) Экспорт

	Для каждого Эл Из Источник Цикл
		Приемник.Добавить(Эл);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со строками

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
	Знач ПропускатьПустыеСтроки = Неопределено,
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

Функция ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке) Экспорт
	
	Описание = ИнформацияОбОшибке.Описание;
	
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		Описание = Описание + " -> " +
		ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке.Причина);
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
