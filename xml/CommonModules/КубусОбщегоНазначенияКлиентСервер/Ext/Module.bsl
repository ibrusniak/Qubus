////////////////////////////////////////////////////////////////////////////////
// Подсистема Кубус
// https://github.com/ibrusniak/Qubus
//
// Модуль 'КубусОбщегоНазначенияКлиентСервер'
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с JSON

Функция СериализацияВJson(Объект) Экспорт

	ЗаписьJson = Новый ЗаписьJSON();
	ЗаписьJson.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	Попытка
		ЗаписатьJSON(ЗаписьJson, Объект);
	Исключение
		
		ЗаписьJson.Закрыть();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение
			КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.СериализацииВJson +
			": " + ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	Возврат ЗаписьJson.Закрыть();
	
КонецФункции

Функция ДесериализоватьJsonВСоответствие(Json) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Json);
	
	Попытка
		Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		
		ЧтениеJSON.Закрыть();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение
			КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.ДесериализацииИзJson +
			": " + ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке);
		
	КонецПопытки;

	ЧтениеJSON.Закрыть();
	Возврат Соответствие;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с массивами

Процедура ДополнитьМассив(Источник, Приемник) Экспорт

	Для каждого Эл Из Источник Цикл
		Приемник.Добавить(Эл);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со строками

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
	Знач ПропускатьПустыеСтроки = Неопределено,
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Прочие

Функция ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке) Экспорт
	
	Описание = ИнформацияОбОшибке.Описание;
	
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		Описание = Описание + " -> " +
		ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке.Причина);
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти
