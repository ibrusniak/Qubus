////////////////////////////////////////////////////////////////////////////////
// Подсистема Кубус
// https://github.com/ibrusniak/Qubus
//
// Модуль 'КубусВалидацияСервер'
//
// Базовые валидации:
// - Обязательное/необязательное [Присутствует ли параметр (required/optional)]
// - Пустое значение [Проверка на null, undefined, пустую строку, пустой массив/объект]
// - Тип данных [Строка, число, булево, массив, объект и т.д.]
// - Формат [Email, UUID, IP, дата и т.д. (обычно через RegExp)]
// - Длина строки [min/max длина]
// - Диапазон чисел [min/max значение]
// - Количество элементов в массиве [min/max длина массива]
// - Структура объекта [У объекта должны быть нужные поля, и только они]
// - Допустимые значения (enum) [Проверка на список допустимых значений]
//
// Безопасность и защита
// - Ограничение размера запроса [Чтобы избежать DoS через большие payload'ы]
// - Чистка от управляющих символов [Например, \x00, \r, \n и т.д.]
//
// Форматы и дата/время
// - Формат даты/времени [Например: YYYY-MM-DD, ISO 8601]
// - Дата в прошлом/будущем [Проверка временного диапазона]
//
// Математические/сопоставимые проверки
// - Сравнение значений [start_date < end_date, min <= max]
// - Связанные поля [Если одно поле задано — другое тоже обязательно]
// - Условные зависимости [Например: если type == 'admin', то admin_code обязателен]
//
// Шаблон валидации - json, описывающий правила валидации.
// Пример (javascript):
//
//     const schema = {
//       username: {
//         type: "string",
//         required: true,
//         minLength: 3,
//         maxLength: 30,
//         pattern: /^[a-zA-Z0-9_]+$/
//       },
//       email: {
//         type: "string",
//         required: true,
//         format: "email",
//         maxLength: 100
//       },
//       age: {
//         type: "number",
//         required: false,
//         min: 0,
//         max: 150
//       },
//       isAdmin: {
//         type: "boolean",
//         required: false,
//         default: false
//       },
//       tags: {
//         type: "array",
//         items: { type: "string", maxLength: 20 },
//         minItems: 1,
//         maxItems: 10
//       }
//     };
//
// Поля шаблона:
//
//  required	true или false
//  type		'string', 'number', 'boolean', 'array', 'object'
//  minLength	Для строк и массивов
//  maxLength	Для строк и массивов
//  min			Для чисел
//  max			Для чисел
//  pattern		RegExp для строк
//  format		'email', 'uuid', 'ip', 'date', 'url' и т.д.
//  enum		Список допустимых значений
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ВалидацияПараметровHTTPЗапроса(Знач HTTPСервисЗапрос, ШаблонВалидацииJSON) Экспорт

	СтруктураВозврата = СтурктураРезультатыВалидации();
		
	ШаблонВалидации = Неопределено;
	
	Попытка
		ШаблонВалидации = КубусОбщегоНазначенияКлиентСервер.ДесериализоватьJsonВСоответствие(ШаблонВалидацииJSON);	
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение
			КубусСтроковыеЗначенияКлиентСервер.Все().Ошибки.НеверныйШаблонВалидации +
			": " + КубусОбщегоНазначенияКлиентСервер.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке);
			
	КонецПопытки;

	Для каждого КЗ Из ШаблонВалидации Цикл
		
		ИмяПараметра = КЗ.Ключ;
		ЗначениеПараметра = HTTPСервисЗапрос.ПараметрыЗапроса.Получить(ИмяПараметра);
		ПравилаВалидации = КЗ.Значение;
		Структура = ВалидацияЗначения(ЗначениеПараметра, ИмяПараметра, ПравилаВалидации);
		
		Если НЕ Структура.ВалидацияПройдена Тогда
			СтруктураВозврата.ВалидацияПройдена = Ложь;
			КубусОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктураВозврата.ОшибкиВалидации, Структура.ОшибкиВалидации);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВалидацияЗначения(Значение, ИмяПараметра, ПравилаВалидации)
	
	СтруктураВозврата = СтурктураРезультатыВалидации();

	// ИмяПравила:
	//  required	true или false
	//  type		'string', 'number', 'boolean', 'array', 'object'
	//  minLength	Для строк и массивов
	//  maxLength	Для строк и массивов
	//  min			Для чисел
	//  max			Для чисел
	//  pattern		RegExp для строк
	//  format		'email', 'uuid', 'ip', 'date', 'url' и т.д.
	//  enum		Список допустимых значений
		
	Для каждого КЗ Из ПравилаВалидации Цикл
		
		ИмяПравила = КЗ.Ключ;
		Правило = КЗ.Значение;
		
		МассивДопустимых = КубусОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"required
			|type
			|minlength
			|maxlength
			|min
			|max
			|pattern
			|format
			|enum",
			Символы.ПС);
			
		Если МассивДопустимых.Найти(НРег(ИмяПравила)) <> Неопределено Тогда
			Структура = Вычислить("_" + НРег(ИмяПравила) + "(ИмяПараметра, Значение, Правило)");
			Если НЕ Структура.ВалидацияПройдена Тогда
				СтруктураВозврата.ВалидацияПройдена = Ложь;
				КубусОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктураВозврата.ОшибкиВалидации, Структура.ОшибкиВалидации);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _required(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Если Правило = Истина Тогда
		
		Если Значение = Неопределено Тогда
			
			СтруктураВозврата.ВалидацияПройдена = Ложь;
			
			СтруктураВозврата.ОшибкиВалидации.Добавить(
				"Опущен обязательый параметр запроса: '" + ИмяПараметра + "'");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
			
			СтруктураВозврата.ВалидацияПройдена = Ложь;
			
			СтруктураВозврата.ОшибкиВалидации.Добавить(
				"Значение параметра '" + ИмяПараметра + "' должно быть задано");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _type(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	МассивДопустимыхТипов = КубусОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"string
		|number
		|boolean",
		Символы.ПС);
		
	Если МассивДопустимыхТипов.Найти(НРег(Правило)) Тогда
			
		Структура = Вычислить("_" + НРег(Правило) + "(ИмяПараметра, Значение)");
		Если НЕ Структура.ВалидацияПройдена Тогда
			СтруктураВозврата.ВалидацияПройдена = Ложь;
			КубусОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктураВозврата.ОшибкиВалидации, Структура.ОшибкиВалидации);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _minlength(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _maxlength(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _min(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _max(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _pattern(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _format(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _enum(ИмяПараметра, Значение, Правило)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _string(ИмяПараметра, Значение)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _number(ИмяПараметра, Значение)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Попытка
		Ч = Число(Значение);
	Исключение
		СтруктураВозврата.ВалидацияПройдена = Ложь;
		СтруктураВозврата.ОшибкиВалидации.Добавить(
			"Параметр '" + ИмяПараметра + "' должен быть числом");
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция _boolean(ИмяПараметра, Значение)

	СтруктураВозврата = СтурктураРезультатыВалидации();
	
	Возврат СтруктураВозврата;

КонецФункции

Функция СтурктураРезультатыВалидации()
	Возврат Новый Структура("ВалидацияПройдена, ОшибкиВалидации",
		Истина, Новый Массив());
КонецФункции

#КонецОбласти
